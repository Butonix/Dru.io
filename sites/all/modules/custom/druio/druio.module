<?php

/**
 * @file
 * Main code.
 */

define('DRUIO_MIN_USER_RATING_TO_VOTE', 10);

// Tracking messages config.
module_load_include('inc', 'druio', 'includes/druio.messages');

/**
 * Implements hook_flag_flag().
 */
function druio_flag_flag($flag, $entity_id, $account, $flagging) {
  if ($flag->name == 'best_answer') {

    $answers = db_select('field_data_field_answer_question_reference', 'er')
      ->fields('er', array('entity_id'))
      ->condition('er.entity_type', 'node')
      ->condition('er.bundle', 'answer')
      ->condition('er.field_answer_question_reference_target_id', $entity_id)
      ->execute();

    // Unflag all others.
    if (!empty($answers)) {
      $flag = flag_get_flag('best_answer');

      foreach ($answers as $answer) {
        if ($answer->entity_id != $entity_id) {
          $flag->flag('unflag', $answer->entity_id);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function druio_form_alter(&$form, &$form_state, $form_id) {
  // Disable formatting tips for comments.
  if (in_array($form_id, array(
    'comment_node_question_form',
    'comment_node_post_form',
  ))) {
    $form['comment_body']['#after_build'][] = 'druio_form_remove_formatting_tips';
  }

  // Disable formatting tips for nodes.
  if (in_array($form_id, array(
    'question_node_form',
    'post_node_form',
    'answer_node_form',
  ))) {
    $form['body']['#after_build'][] = 'druio_form_remove_formatting_tips';
  }

  // Add default project reference to question.
  if ($form_id == 'question_node_form' && !empty($_GET['project'])) {
    $project_nid = (int) $_GET['project'];
    if ($entity_node = node_load($project_nid)) {
      $form['field_project_reference'][LANGUAGE_NONE]['#default_value'] = $entity_node->title . ' (' . $entity_node->nid . ')';
    }
  }

  // If Answer Node form.
  if ($form_id == 'answer_node_form') {
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'answer') {
      drupal_set_message('Ответы можно добавлять только к вопросам.', 'warning');
      // @todo: редирект нужно делать раньше, не в форме.
      drupal_goto('/question');
    }
    // Make title not required and hide it.
    $form['title']['#required'] = FALSE;
    hide($form['title']);

    $answer_nid = arg(1);
    $form['title']['#value'] = "Ответ №{$answer_nid}";

    // Hide field reference to question.
    hide($form['field_answer_question_reference']);

    // Set default reference to question when adding new answer.
    if (empty($form['field_answer_question_reference'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
      if ($question = node_load($answer_nid)) {
        $form['field_answer_question_reference'][LANGUAGE_NONE][0]['target_id']['#default_value'] = "{$question->title} ({$question->nid})";
      }
      // $form['field_answer_question_reference'][LANGUAGE_NONE]['#default_value'] = $question->nid;
    }

    // Check if user has access to node creation.
    if (!user_access('create answer content')) {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Remove formating tips for comments.
 *
 * @param object $form
 *
 * @return mixed
 */
function druio_form_remove_formatting_tips(&$form) {
  $form[LANGUAGE_NONE][0]['format']['#access'] = FALSE;

  return $form;
}

/**
 * Return has or not question best answer.
 *
 * @param int $nid
 *
 * @return bool
 */
function druio_question_is_best_answer($nid) {
  $answers = db_select('field_data_field_answer_question_reference', 'er')
    ->fields('er', array('entity_id'))
    ->condition('er.entity_type', 'node')
    ->condition('er.bundle', 'answer')
    ->condition('er.field_answer_question_reference_target_id', $nid)
    ->execute();

  $is_best_answer = FALSE;
  if (!empty($answers)) {
    foreach ($answers as $answer) {
      // @todo: переписать в запрос джойном с flag_counts.
      if (flag_get_counts('node', $answer->entity_id)) {
        $is_best_answer = TRUE;
        break;
      }
    }
  }

  return $is_best_answer;
}

/**
 * Returns count of answers.
 *
 * @param int $nid
 *
 * @return mixed
 */
function druio_question_answers_count($nid) {
  $answers = db_select('field_data_field_answer_question_reference', 'er');
  $answers->addExpression('COUNT(*)');
  $answers->join('node', 'n', 'n.nid = er.entity_id');
  $answers->condition('n.status', 1);
  $answers->condition('er.entity_type', 'node');
  $answers->condition('er.bundle', 'answer');
  $answers->condition('er.field_answer_question_reference_target_id', $nid);
  $result = $answers->execute()->fetchField();

  return $result;
}

/**
 * Is user answered to this question before.
 *
 * @param int $qid
 * @param int $uid
 *
 * @return bool
 */
function druio_is_user_answered_to_question($qid, $uid) {
  // Default value.
  $result = FALSE;

  // Get all answers to question.
  $query = db_select('field_data_field_answer_question_reference', 'qr');
  $query->condition('qr.entity_type', 'node');
  $query->condition('qr.bundle', 'answer');
  $query->condition('qr.field_answer_question_reference_target_id', $qid);
  $query->fields('qr', array('entity_id'));
  $answers = $query->execute()->fetchAllAssoc('entity_id');

  // If answers exists.
  if (!empty($answers)) {
    // Prepare answer id's.
    $aids = array_keys($answers);
    // Check whether the user is the author of at least one of the answers.
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.uid', $uid);
    $query->condition('n.nid', $aids, 'IN');
    $query->countQuery();
    $result = $query->execute()->fetchField();
  }

  return (bool) $result;
}

/**
 * Implements hook_block_info().
 *
 * @return mixed
 */
function druio_block_info() {
  $blocks['add_content_buttons'] = array(
    'info' => 'Кнопки добавления содержимого',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function druio_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'add_content_buttons':
      $block['subject'] = '';
      $block['content'] = array(
        '#theme' => 'add_content_buttons',
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function druio_theme() {
  return array(
    'add_content_buttons' => array(
      'template' => 'templates/theme/add-content-buttons',
      'render element' => 'theme',
    ),
    'add_question_help_text' => array(
      'template' => 'theme/add-question-help',
      'variables' => array(
        'user_rating' => NULL,
        'min_rating' => NULL,
      ),
    )
  );
}

/**
 * Remove "log in to post comment".
 *
 * @param object $comment
 * @param string $view_mode
 * @param string $langcode
 */
function druio_comment_view($comment, $view_mode, $langcode) {
  unset($comment->content['links']['comment']['#links']['comment_forbidden']);
}

/**
 * Plural function for Russian words.
 * @param $number
 * @param $endingArray
 * @return
 */
function druio_russian_plural($number, $endingArray) {
  $number = abs($number) % 100;
  if ($number >= 11 && $number <= 19) {
    $ending = $endingArray[2];
  }
  else {
    $i = $number % 10;
    switch ($i) {
      case (0):
        $ending = $endingArray[2];
        break;
      case (1):
        $ending = $endingArray[0];
        break;
      case (2):
      case (3):
      case (4):
        $ending = $endingArray[1];
        break;
      default:
        $ending = $endingArray[2];
    }
  }
  return $ending;
}

/**
 * Return url to user picture (avatar).
 * @param $uid
 * @param string $image_style
 * @return string
 */
function druio_get_user_picture($uid, $image_style = NULL) {
  $user = user_load($uid);
  if ($user->picture) {
    if ($image_style) {
      return image_style_url($image_style, $user->picture->uri);
    }
    else {
      return file_Create_url($user->picture->uri);
    }
  }
  else {
    return '/' . variable_get('user_picture_default', '');
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function druio_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = 'druio_form_user_profile_form_afetr_build';
}

/**
 * After build callback for 'user_profile_form' form id.
 * @param $form
 */
function druio_form_user_profile_form_afetr_build($form) {
  // Disable format helpers.
  $form['field_user_contacts'][LANGUAGE_NONE][0]['format']['#access'] = FALSE;
  // Disable rating field.
  $form['field_user_rating'][LANGUAGE_NONE][0]['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_rate_vote_alter().
 */
function druio_rate_vote_alter($vote, $context) {
  global $user;
  $user_wrapper = entity_metadata_wrapper('user', $user);
  if ($context['widget']->name == 'vote_up_down') {
    if ($user_wrapper->field_user_rating->value() < DRUIO_MIN_USER_RATING_TO_VOTE) {
      drupal_set_message('Вы не можете изменить рейтинг, так как Ваш рейтинг меньше ' . DRUIO_MIN_USER_RATING_TO_VOTE . '.', 'warning');
      $context['save'] = FALSE;
      if ($vote['entity_type'] == 'node') {
        $context['redirect'] = url('node/' . $vote['entity_id']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function druio_preprocess_node(&$variables) {
  $node_wrapper = entity_metadata_wrapper('node', $variables['node']);
  // Redirect user from /answer/NID page to question page.
  if ($node_wrapper->getBundle() == 'answer' && arg(0) == 'node' && $variables['view_mode'] != 'teaser') {
    drupal_goto('node/' . $node_wrapper->field_answer_question_reference->getIdentifier());
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * FORM_ID:
 *   question_node_form
 *
 * Altering question 'add' form.
 */
function druio_form_question_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $user_rating = druio_rating_get_user_rating($user);
  $query_parameters = drupal_get_query_parameters();
  // Query for forcing this part of code.
  if ($user_rating < DRUIO_MIN_USER_RATING_TO_VOTE || isset($query_parameters['help'])) {
    // Hide every form element.
    foreach ($form as $key => $value) {
      if (is_array($form[$key]) && !empty($form[$key]['#type'])) {
        $form[$key]['#states'] = array(
          'visible' => array(
            'input[name="i_read_it"]' => array(
              'checked' => TRUE,
            ),
          ),
        );
      }
    }

    $form['new_users_help'] = array(
      '#theme' => 'add_question_help_text',
      '#user_rating' => $user_rating,
      '#min_rating' => DRUIO_MIN_USER_RATING_TO_VOTE,
      '#weight' => -100,
    );

    $form['i_read_it'] = array(
      '#type' => 'checkbox',
      '#title' => 'Я готов задать вопрос!',
      '#description' => 'Ставя эту галочку, вы подтерждаете что прочитали рекомендации по добавлению вопросов.',
      '#weight' => -90,
    );
  }

  $form['title']['#suffix'] = '<div id="suggested-questions"></div>';
  $form['title']['#attributes'] = array(
    'autocomplete' => 'off',
  );
  $form['title']['#ajax'] = array(
    'callback' => 'druio_question_node_form_title_suggestions',
    'wrapper' => 'suggested-questions',
    //'event' => 'keydown',
    'keypress' => TRUE,
    'method' => 'html',
  );
}

/**
 * Callback for question title suggestions on question creation form page.
 */
function druio_question_node_form_title_suggestions($form, $form_state) {
  $values = $form_state['values'];
  if (!empty($values['title'])) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('n.type', 'question')
      ->condition('n.title', '%' . db_like($values['title']) . '%', 'LIKE')
      ->range(0, 5)
      ->execute();

    $html_result = '';
    if ($result->rowCount()) {
      $html_result .= '<strong>Похожие вопросы:</strong>';
      $html_result .= '<div class="description">Возможно на ваш вопрос, на который вы ищите ответ, уже давали ответ.</div>';
      foreach ($result as $node) {
        $view = node_view(node_load($node->nid), 'minimal');
        $html_result .= drupal_render($view);
      }
    }
    $commands = array();
    $commands[] = ajax_command_html(NULL, $html_result);
    return array('#type' => 'ajax', '#commands' => $commands);
  }
}

